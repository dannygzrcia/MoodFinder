import { useState } from 'react'

const PlaylistDisplay = ({ playlist, mood, accessToken }) => {
  const [isCreatingPlaylist, setIsCreatingPlaylist] = useState(false)
  const [playlistCreated, setPlaylistCreated] = useState(false)

  const createSpotifyPlaylist = async () => {
    setIsCreatingPlaylist(true)
    try {
      // Get user profile
      const profileResponse = await fetch('https://api.spotify.com/v1/me', {
        headers: {
          'Authorization': `Bearer ${accessToken}`
        }
      })
      const profile = await profileResponse.json()

      // Create playlist
      const playlistResponse = await fetch(`https://api.spotify.com/v1/users/${profile.id}/playlists`, {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${accessToken}`,
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          name: `${mood.name} Vibes - ${new Date().toLocaleDateString()}`,
          description: `A ${mood.name.toLowerCase()} mood playlist generated by MoodTunes`,
          public: false
        })
      })
      const newPlaylist = await playlistResponse.json()

      // Add tracks to playlist
      const trackUris = playlist.map(track => track.uri)
      await fetch(`https://api.spotify.com/v1/playlists/${newPlaylist.id}/tracks`, {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${accessToken}`,
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          uris: trackUris
        })
      })

      setPlaylistCreated(true)
    } catch (error) {
      console.error('Error creating playlist:', error)
      alert('Failed to create playlist. Please try again.')
    } finally {
      setIsCreatingPlaylist(false)
    }
  }

  const formatDuration = (ms) => {
    const minutes = Math.floor(ms / 60000)
    const seconds = ((ms % 60000) / 1000).toFixed(0)
    return `${minutes}:${seconds.padStart(2, '0')}`
  }

  return (
    <div className="bg-white/10 backdrop-blur-md rounded-2xl p-6">
      <div className="flex items-center justify-between mb-6">
        <h3 className="text-2xl font-bold text-white flex items-center gap-2">
          {mood.emoji} Your {mood.name} Playlist
        </h3>
        <button
          onClick={createSpotifyPlaylist}
          disabled={isCreatingPlaylist || playlistCreated}
          className={`
            px-4 py-2 rounded-lg font-semibold transition-colors duration-200
            ${playlistCreated 
              ? 'bg-green-600 text-white cursor-default' 
              : isCreatingPlaylist
                ? 'bg-gray-600 text-gray-300 cursor-not-allowed'
                : 'bg-spotify hover:bg-green-600 text-white'
            }
          `}
        >
          {playlistCreated ? '✓ Saved to Spotify' : isCreatingPlaylist ? 'Creating...' : 'Save to Spotify'}
        </button>
      </div>

      <div className="space-y-3 max-h-96 overflow-y-auto">
        {playlist.map((track, index) => (
          <div key={track.id} className="flex items-center gap-4 p-3 bg-white/5 rounded-lg hover:bg-white/10 transition-colors">
            <div className="text-gray-400 font-mono text-sm w-8">
              {(index + 1).toString().padStart(2, '0')}
            </div>
            
            <img 
              src={track.album.images[2]?.url || track.album.images[0]?.url} 
              alt={track.album.name}
              className="w-12 h-12 rounded-lg object-cover"
            />
            
            <div className="flex-1 min-w-0">
              <h4 className="text-white font-semibold truncate">{track.name}</h4>
              <p className="text-gray-300 text-sm truncate">
                {track.artists.map(artist => artist.name).join(', ')} • {track.album.name}
              </p>
            </div>
            
            <div className="text-gray-400 text-sm">
              {formatDuration(track.duration_ms)}
            </div>

            {track.preview_url && (
              <audio controls className="w-32 h-8">
                <source src={track.preview_url} type="audio/mpeg" />
              </audio>
            )}
          </div>
        ))}
      </div>

      <div className="mt-6 text-center text-gray-300">
        <p className="text-sm">
          {playlist.length} tracks • Total duration: {formatDuration(playlist.reduce((total, track) => total + track.duration_ms, 0))}
        </p>
      </div>
    </div>
  )
}

export default PlaylistDisplay
